/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface AccessControlledAggregatorInterface extends utils.Interface {
  functions: {
    'acceptAdmin(address)': FunctionFragment;
    'acceptOwnership()': FunctionFragment;
    'addAccess(address)': FunctionFragment;
    'allocatedFunds()': FunctionFragment;
    'availableFunds()': FunctionFragment;
    'changeOracles(address[],address[],address[],uint32,uint32,uint32)': FunctionFragment;
    'checkEnabled()': FunctionFragment;
    'decimals()': FunctionFragment;
    'description()': FunctionFragment;
    'disableAccessCheck()': FunctionFragment;
    'enableAccessCheck()': FunctionFragment;
    'getAdmin(address)': FunctionFragment;
    'getAnswer(uint256)': FunctionFragment;
    'getOracles()': FunctionFragment;
    'getRoundData(uint80)': FunctionFragment;
    'getTimestamp(uint256)': FunctionFragment;
    'hasAccess(address,bytes)': FunctionFragment;
    'latestAnswer()': FunctionFragment;
    'latestRound()': FunctionFragment;
    'latestRoundData()': FunctionFragment;
    'latestTimestamp()': FunctionFragment;
    'linkToken()': FunctionFragment;
    'maxSubmissionCount()': FunctionFragment;
    'maxSubmissionValue()': FunctionFragment;
    'minSubmissionCount()': FunctionFragment;
    'minSubmissionValue()': FunctionFragment;
    'onTokenTransfer(address,uint256,bytes)': FunctionFragment;
    'oracleCount()': FunctionFragment;
    'oracleRoundState(address,uint32)': FunctionFragment;
    'owner()': FunctionFragment;
    'paymentAmount()': FunctionFragment;
    'removeAccess(address)': FunctionFragment;
    'requestNewRound()': FunctionFragment;
    'restartDelay()': FunctionFragment;
    'setRequesterPermissions(address,bool,uint32)': FunctionFragment;
    'setValidator(address)': FunctionFragment;
    'submit(uint256,int256)': FunctionFragment;
    'timeout()': FunctionFragment;
    'transferAdmin(address,address)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'updateAvailableFunds()': FunctionFragment;
    'updateFutureRounds(uint128,uint32,uint32,uint32,uint32)': FunctionFragment;
    'validator()': FunctionFragment;
    'version()': FunctionFragment;
    'withdrawFunds(address,uint256)': FunctionFragment;
    'withdrawPayment(address,address,uint256)': FunctionFragment;
    'withdrawablePayment(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'acceptAdmin'
      | 'acceptOwnership'
      | 'addAccess'
      | 'allocatedFunds'
      | 'availableFunds'
      | 'changeOracles'
      | 'checkEnabled'
      | 'decimals'
      | 'description'
      | 'disableAccessCheck'
      | 'enableAccessCheck'
      | 'getAdmin'
      | 'getAnswer'
      | 'getOracles'
      | 'getRoundData'
      | 'getTimestamp'
      | 'hasAccess'
      | 'latestAnswer'
      | 'latestRound'
      | 'latestRoundData'
      | 'latestTimestamp'
      | 'linkToken'
      | 'maxSubmissionCount'
      | 'maxSubmissionValue'
      | 'minSubmissionCount'
      | 'minSubmissionValue'
      | 'onTokenTransfer'
      | 'oracleCount'
      | 'oracleRoundState'
      | 'owner'
      | 'paymentAmount'
      | 'removeAccess'
      | 'requestNewRound'
      | 'restartDelay'
      | 'setRequesterPermissions'
      | 'setValidator'
      | 'submit'
      | 'timeout'
      | 'transferAdmin'
      | 'transferOwnership'
      | 'updateAvailableFunds'
      | 'updateFutureRounds'
      | 'validator'
      | 'version'
      | 'withdrawFunds'
      | 'withdrawPayment'
      | 'withdrawablePayment',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'acceptAdmin', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'acceptOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'addAccess', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'allocatedFunds', values?: undefined): string;
  encodeFunctionData(functionFragment: 'availableFunds', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'changeOracles',
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'checkEnabled', values?: undefined): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(functionFragment: 'description', values?: undefined): string;
  encodeFunctionData(functionFragment: 'disableAccessCheck', values?: undefined): string;
  encodeFunctionData(functionFragment: 'enableAccessCheck', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getAdmin', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getAnswer', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'getOracles', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getRoundData', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'getTimestamp', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'hasAccess',
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(functionFragment: 'latestAnswer', values?: undefined): string;
  encodeFunctionData(functionFragment: 'latestRound', values?: undefined): string;
  encodeFunctionData(functionFragment: 'latestRoundData', values?: undefined): string;
  encodeFunctionData(functionFragment: 'latestTimestamp', values?: undefined): string;
  encodeFunctionData(functionFragment: 'linkToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'maxSubmissionCount', values?: undefined): string;
  encodeFunctionData(functionFragment: 'maxSubmissionValue', values?: undefined): string;
  encodeFunctionData(functionFragment: 'minSubmissionCount', values?: undefined): string;
  encodeFunctionData(functionFragment: 'minSubmissionValue', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'onTokenTransfer',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(functionFragment: 'oracleCount', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'oracleRoundState',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paymentAmount', values?: undefined): string;
  encodeFunctionData(functionFragment: 'removeAccess', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'requestNewRound', values?: undefined): string;
  encodeFunctionData(functionFragment: 'restartDelay', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'setRequesterPermissions',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'setValidator', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'submit',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'timeout', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'transferAdmin',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'updateAvailableFunds', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'updateFutureRounds',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'validator', values?: undefined): string;
  encodeFunctionData(functionFragment: 'version', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'withdrawFunds',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawPayment',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'withdrawablePayment', values: [PromiseOrValue<string>]): string;

  decodeFunctionResult(functionFragment: 'acceptAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'acceptOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addAccess', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'allocatedFunds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'availableFunds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'changeOracles', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'checkEnabled', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'description', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'disableAccessCheck', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'enableAccessCheck', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAnswer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getOracles', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRoundData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTimestamp', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasAccess', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'latestAnswer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'latestRound', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'latestRoundData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'latestTimestamp', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'linkToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxSubmissionCount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxSubmissionValue', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'minSubmissionCount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'minSubmissionValue', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'onTokenTransfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'oracleCount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'oracleRoundState', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paymentAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeAccess', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'requestNewRound', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'restartDelay', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setRequesterPermissions', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setValidator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'submit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'timeout', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateAvailableFunds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateFutureRounds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'validator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'version', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawFunds', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawPayment', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawablePayment', data: BytesLike): Result;

  events: {
    'AddedAccess(address)': EventFragment;
    'AnswerUpdated(int256,uint256,uint256)': EventFragment;
    'AvailableFundsUpdated(uint256)': EventFragment;
    'CheckAccessDisabled()': EventFragment;
    'CheckAccessEnabled()': EventFragment;
    'NewRound(uint256,address,uint256)': EventFragment;
    'OracleAdminUpdateRequested(address,address,address)': EventFragment;
    'OracleAdminUpdated(address,address)': EventFragment;
    'OraclePermissionsUpdated(address,bool)': EventFragment;
    'OwnershipTransferRequested(address,address)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'RemovedAccess(address)': EventFragment;
    'RequesterPermissionsSet(address,bool,uint32)': EventFragment;
    'RoundDetailsUpdated(uint128,uint32,uint32,uint32,uint32)': EventFragment;
    'SubmissionReceived(int256,uint32,address)': EventFragment;
    'ValidatorUpdated(address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AddedAccess'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AnswerUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AvailableFundsUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CheckAccessDisabled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CheckAccessEnabled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewRound'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OracleAdminUpdateRequested'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OracleAdminUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OraclePermissionsUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferRequested'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RemovedAccess'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RequesterPermissionsSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoundDetailsUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SubmissionReceived'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ValidatorUpdated'): EventFragment;
}

export interface AddedAccessEventObject {
  user: string;
}
export type AddedAccessEvent = TypedEvent<[string], AddedAccessEventObject>;

export type AddedAccessEventFilter = TypedEventFilter<AddedAccessEvent>;

export interface AnswerUpdatedEventObject {
  current: BigNumber;
  roundId: BigNumber;
  updatedAt: BigNumber;
}
export type AnswerUpdatedEvent = TypedEvent<[BigNumber, BigNumber, BigNumber], AnswerUpdatedEventObject>;

export type AnswerUpdatedEventFilter = TypedEventFilter<AnswerUpdatedEvent>;

export interface AvailableFundsUpdatedEventObject {
  amount: BigNumber;
}
export type AvailableFundsUpdatedEvent = TypedEvent<[BigNumber], AvailableFundsUpdatedEventObject>;

export type AvailableFundsUpdatedEventFilter = TypedEventFilter<AvailableFundsUpdatedEvent>;

export interface CheckAccessDisabledEventObject {}
export type CheckAccessDisabledEvent = TypedEvent<[], CheckAccessDisabledEventObject>;

export type CheckAccessDisabledEventFilter = TypedEventFilter<CheckAccessDisabledEvent>;

export interface CheckAccessEnabledEventObject {}
export type CheckAccessEnabledEvent = TypedEvent<[], CheckAccessEnabledEventObject>;

export type CheckAccessEnabledEventFilter = TypedEventFilter<CheckAccessEnabledEvent>;

export interface NewRoundEventObject {
  roundId: BigNumber;
  startedBy: string;
  startedAt: BigNumber;
}
export type NewRoundEvent = TypedEvent<[BigNumber, string, BigNumber], NewRoundEventObject>;

export type NewRoundEventFilter = TypedEventFilter<NewRoundEvent>;

export interface OracleAdminUpdateRequestedEventObject {
  oracle: string;
  admin: string;
  newAdmin: string;
}
export type OracleAdminUpdateRequestedEvent = TypedEvent<
  [string, string, string],
  OracleAdminUpdateRequestedEventObject
>;

export type OracleAdminUpdateRequestedEventFilter = TypedEventFilter<OracleAdminUpdateRequestedEvent>;

export interface OracleAdminUpdatedEventObject {
  oracle: string;
  newAdmin: string;
}
export type OracleAdminUpdatedEvent = TypedEvent<[string, string], OracleAdminUpdatedEventObject>;

export type OracleAdminUpdatedEventFilter = TypedEventFilter<OracleAdminUpdatedEvent>;

export interface OraclePermissionsUpdatedEventObject {
  oracle: string;
  whitelisted: boolean;
}
export type OraclePermissionsUpdatedEvent = TypedEvent<[string, boolean], OraclePermissionsUpdatedEventObject>;

export type OraclePermissionsUpdatedEventFilter = TypedEventFilter<OraclePermissionsUpdatedEvent>;

export interface OwnershipTransferRequestedEventObject {
  from: string;
  to: string;
}
export type OwnershipTransferRequestedEvent = TypedEvent<[string, string], OwnershipTransferRequestedEventObject>;

export type OwnershipTransferRequestedEventFilter = TypedEventFilter<OwnershipTransferRequestedEvent>;

export interface OwnershipTransferredEventObject {
  from: string;
  to: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface RemovedAccessEventObject {
  user: string;
}
export type RemovedAccessEvent = TypedEvent<[string], RemovedAccessEventObject>;

export type RemovedAccessEventFilter = TypedEventFilter<RemovedAccessEvent>;

export interface RequesterPermissionsSetEventObject {
  requester: string;
  authorized: boolean;
  delay: number;
}
export type RequesterPermissionsSetEvent = TypedEvent<[string, boolean, number], RequesterPermissionsSetEventObject>;

export type RequesterPermissionsSetEventFilter = TypedEventFilter<RequesterPermissionsSetEvent>;

export interface RoundDetailsUpdatedEventObject {
  paymentAmount: BigNumber;
  minSubmissionCount: number;
  maxSubmissionCount: number;
  restartDelay: number;
  timeout: number;
}
export type RoundDetailsUpdatedEvent = TypedEvent<
  [BigNumber, number, number, number, number],
  RoundDetailsUpdatedEventObject
>;

export type RoundDetailsUpdatedEventFilter = TypedEventFilter<RoundDetailsUpdatedEvent>;

export interface SubmissionReceivedEventObject {
  submission: BigNumber;
  round: number;
  oracle: string;
}
export type SubmissionReceivedEvent = TypedEvent<[BigNumber, number, string], SubmissionReceivedEventObject>;

export type SubmissionReceivedEventFilter = TypedEventFilter<SubmissionReceivedEvent>;

export interface ValidatorUpdatedEventObject {
  previous: string;
  current: string;
}
export type ValidatorUpdatedEvent = TypedEvent<[string, string], ValidatorUpdatedEventObject>;

export type ValidatorUpdatedEventFilter = TypedEventFilter<ValidatorUpdatedEvent>;

export interface AccessControlledAggregator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AccessControlledAggregatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptAdmin(
      _oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    acceptOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    addAccess(
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    allocatedFunds(overrides?: CallOverrides): Promise<[BigNumber]>;

    availableFunds(overrides?: CallOverrides): Promise<[BigNumber]>;

    changeOracles(
      _removed: PromiseOrValue<string>[],
      _added: PromiseOrValue<string>[],
      _addedAdmins: PromiseOrValue<string>[],
      _minSubmissions: PromiseOrValue<BigNumberish>,
      _maxSubmissions: PromiseOrValue<BigNumberish>,
      _restartDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    checkEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    description(overrides?: CallOverrides): Promise<[string]>;

    disableAccessCheck(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    enableAccessCheck(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    getAdmin(_oracle: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;

    getAnswer(_roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getOracles(overrides?: CallOverrides): Promise<[string[]]>;

    getRoundData(
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        roundId: BigNumber;
        answer: BigNumber;
        startedAt: BigNumber;
        updatedAt: BigNumber;
        answeredInRound: BigNumber;
      }
    >;

    getTimestamp(_roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    hasAccess(
      _user: PromiseOrValue<string>,
      _calldata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    latestAnswer(overrides?: CallOverrides): Promise<[BigNumber]>;

    latestRound(overrides?: CallOverrides): Promise<[BigNumber]>;

    latestRoundData(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        roundId: BigNumber;
        answer: BigNumber;
        startedAt: BigNumber;
        updatedAt: BigNumber;
        answeredInRound: BigNumber;
      }
    >;

    latestTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    linkToken(overrides?: CallOverrides): Promise<[string]>;

    maxSubmissionCount(overrides?: CallOverrides): Promise<[number]>;

    maxSubmissionValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    minSubmissionCount(overrides?: CallOverrides): Promise<[number]>;

    minSubmissionValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    onTokenTransfer(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    oracleCount(overrides?: CallOverrides): Promise<[number]>;

    oracleRoundState(
      _oracle: PromiseOrValue<string>,
      _queriedRoundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [boolean, number, BigNumber, BigNumber, BigNumber, BigNumber, number, BigNumber] & {
        _eligibleToSubmit: boolean;
        _roundId: number;
        _latestSubmission: BigNumber;
        _startedAt: BigNumber;
        _timeout: BigNumber;
        _availableFunds: BigNumber;
        _oracleCount: number;
        _paymentAmount: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paymentAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    removeAccess(
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    requestNewRound(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    restartDelay(overrides?: CallOverrides): Promise<[number]>;

    setRequesterPermissions(
      _requester: PromiseOrValue<string>,
      _authorized: PromiseOrValue<boolean>,
      _delay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setValidator(
      _newValidator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    submit(
      _roundId: PromiseOrValue<BigNumberish>,
      _submission: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    timeout(overrides?: CallOverrides): Promise<[number]>;

    transferAdmin(
      _oracle: PromiseOrValue<string>,
      _newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    transferOwnership(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateAvailableFunds(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    updateFutureRounds(
      _paymentAmount: PromiseOrValue<BigNumberish>,
      _minSubmissions: PromiseOrValue<BigNumberish>,
      _maxSubmissions: PromiseOrValue<BigNumberish>,
      _restartDelay: PromiseOrValue<BigNumberish>,
      _timeout: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    validator(overrides?: CallOverrides): Promise<[string]>;

    version(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawFunds(
      _recipient: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawPayment(
      _oracle: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    withdrawablePayment(_oracle: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  acceptAdmin(
    _oracle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  acceptOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  addAccess(
    _user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  allocatedFunds(overrides?: CallOverrides): Promise<BigNumber>;

  availableFunds(overrides?: CallOverrides): Promise<BigNumber>;

  changeOracles(
    _removed: PromiseOrValue<string>[],
    _added: PromiseOrValue<string>[],
    _addedAdmins: PromiseOrValue<string>[],
    _minSubmissions: PromiseOrValue<BigNumberish>,
    _maxSubmissions: PromiseOrValue<BigNumberish>,
    _restartDelay: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  checkEnabled(overrides?: CallOverrides): Promise<boolean>;

  decimals(overrides?: CallOverrides): Promise<number>;

  description(overrides?: CallOverrides): Promise<string>;

  disableAccessCheck(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  enableAccessCheck(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  getAdmin(_oracle: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  getAnswer(_roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  getOracles(overrides?: CallOverrides): Promise<string[]>;

  getRoundData(
    _roundId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      roundId: BigNumber;
      answer: BigNumber;
      startedAt: BigNumber;
      updatedAt: BigNumber;
      answeredInRound: BigNumber;
    }
  >;

  getTimestamp(_roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  hasAccess(
    _user: PromiseOrValue<string>,
    _calldata: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  latestAnswer(overrides?: CallOverrides): Promise<BigNumber>;

  latestRound(overrides?: CallOverrides): Promise<BigNumber>;

  latestRoundData(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      roundId: BigNumber;
      answer: BigNumber;
      startedAt: BigNumber;
      updatedAt: BigNumber;
      answeredInRound: BigNumber;
    }
  >;

  latestTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  linkToken(overrides?: CallOverrides): Promise<string>;

  maxSubmissionCount(overrides?: CallOverrides): Promise<number>;

  maxSubmissionValue(overrides?: CallOverrides): Promise<BigNumber>;

  minSubmissionCount(overrides?: CallOverrides): Promise<number>;

  minSubmissionValue(overrides?: CallOverrides): Promise<BigNumber>;

  onTokenTransfer(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  oracleCount(overrides?: CallOverrides): Promise<number>;

  oracleRoundState(
    _oracle: PromiseOrValue<string>,
    _queriedRoundId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [boolean, number, BigNumber, BigNumber, BigNumber, BigNumber, number, BigNumber] & {
      _eligibleToSubmit: boolean;
      _roundId: number;
      _latestSubmission: BigNumber;
      _startedAt: BigNumber;
      _timeout: BigNumber;
      _availableFunds: BigNumber;
      _oracleCount: number;
      _paymentAmount: BigNumber;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  paymentAmount(overrides?: CallOverrides): Promise<BigNumber>;

  removeAccess(
    _user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  requestNewRound(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  restartDelay(overrides?: CallOverrides): Promise<number>;

  setRequesterPermissions(
    _requester: PromiseOrValue<string>,
    _authorized: PromiseOrValue<boolean>,
    _delay: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setValidator(
    _newValidator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  submit(
    _roundId: PromiseOrValue<BigNumberish>,
    _submission: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  timeout(overrides?: CallOverrides): Promise<number>;

  transferAdmin(
    _oracle: PromiseOrValue<string>,
    _newAdmin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  transferOwnership(
    _to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateAvailableFunds(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  updateFutureRounds(
    _paymentAmount: PromiseOrValue<BigNumberish>,
    _minSubmissions: PromiseOrValue<BigNumberish>,
    _maxSubmissions: PromiseOrValue<BigNumberish>,
    _restartDelay: PromiseOrValue<BigNumberish>,
    _timeout: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  validator(overrides?: CallOverrides): Promise<string>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawFunds(
    _recipient: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawPayment(
    _oracle: PromiseOrValue<string>,
    _recipient: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  withdrawablePayment(_oracle: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    acceptAdmin(_oracle: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    addAccess(_user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    allocatedFunds(overrides?: CallOverrides): Promise<BigNumber>;

    availableFunds(overrides?: CallOverrides): Promise<BigNumber>;

    changeOracles(
      _removed: PromiseOrValue<string>[],
      _added: PromiseOrValue<string>[],
      _addedAdmins: PromiseOrValue<string>[],
      _minSubmissions: PromiseOrValue<BigNumberish>,
      _maxSubmissions: PromiseOrValue<BigNumberish>,
      _restartDelay: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    checkEnabled(overrides?: CallOverrides): Promise<boolean>;

    decimals(overrides?: CallOverrides): Promise<number>;

    description(overrides?: CallOverrides): Promise<string>;

    disableAccessCheck(overrides?: CallOverrides): Promise<void>;

    enableAccessCheck(overrides?: CallOverrides): Promise<void>;

    getAdmin(_oracle: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    getAnswer(_roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getOracles(overrides?: CallOverrides): Promise<string[]>;

    getRoundData(
      _roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        roundId: BigNumber;
        answer: BigNumber;
        startedAt: BigNumber;
        updatedAt: BigNumber;
        answeredInRound: BigNumber;
      }
    >;

    getTimestamp(_roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    hasAccess(
      _user: PromiseOrValue<string>,
      _calldata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    latestAnswer(overrides?: CallOverrides): Promise<BigNumber>;

    latestRound(overrides?: CallOverrides): Promise<BigNumber>;

    latestRoundData(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        roundId: BigNumber;
        answer: BigNumber;
        startedAt: BigNumber;
        updatedAt: BigNumber;
        answeredInRound: BigNumber;
      }
    >;

    latestTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    linkToken(overrides?: CallOverrides): Promise<string>;

    maxSubmissionCount(overrides?: CallOverrides): Promise<number>;

    maxSubmissionValue(overrides?: CallOverrides): Promise<BigNumber>;

    minSubmissionCount(overrides?: CallOverrides): Promise<number>;

    minSubmissionValue(overrides?: CallOverrides): Promise<BigNumber>;

    onTokenTransfer(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    oracleCount(overrides?: CallOverrides): Promise<number>;

    oracleRoundState(
      _oracle: PromiseOrValue<string>,
      _queriedRoundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [boolean, number, BigNumber, BigNumber, BigNumber, BigNumber, number, BigNumber] & {
        _eligibleToSubmit: boolean;
        _roundId: number;
        _latestSubmission: BigNumber;
        _startedAt: BigNumber;
        _timeout: BigNumber;
        _availableFunds: BigNumber;
        _oracleCount: number;
        _paymentAmount: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    paymentAmount(overrides?: CallOverrides): Promise<BigNumber>;

    removeAccess(_user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    requestNewRound(overrides?: CallOverrides): Promise<BigNumber>;

    restartDelay(overrides?: CallOverrides): Promise<number>;

    setRequesterPermissions(
      _requester: PromiseOrValue<string>,
      _authorized: PromiseOrValue<boolean>,
      _delay: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setValidator(_newValidator: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    submit(
      _roundId: PromiseOrValue<BigNumberish>,
      _submission: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    timeout(overrides?: CallOverrides): Promise<number>;

    transferAdmin(
      _oracle: PromiseOrValue<string>,
      _newAdmin: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    transferOwnership(_to: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    updateAvailableFunds(overrides?: CallOverrides): Promise<void>;

    updateFutureRounds(
      _paymentAmount: PromiseOrValue<BigNumberish>,
      _minSubmissions: PromiseOrValue<BigNumberish>,
      _maxSubmissions: PromiseOrValue<BigNumberish>,
      _restartDelay: PromiseOrValue<BigNumberish>,
      _timeout: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    validator(overrides?: CallOverrides): Promise<string>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFunds(
      _recipient: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    withdrawPayment(
      _oracle: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    withdrawablePayment(_oracle: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    'AddedAccess(address)'(user?: null): AddedAccessEventFilter;
    AddedAccess(user?: null): AddedAccessEventFilter;

    'AnswerUpdated(int256,uint256,uint256)'(
      current?: PromiseOrValue<BigNumberish> | null,
      roundId?: PromiseOrValue<BigNumberish> | null,
      updatedAt?: null,
    ): AnswerUpdatedEventFilter;
    AnswerUpdated(
      current?: PromiseOrValue<BigNumberish> | null,
      roundId?: PromiseOrValue<BigNumberish> | null,
      updatedAt?: null,
    ): AnswerUpdatedEventFilter;

    'AvailableFundsUpdated(uint256)'(amount?: PromiseOrValue<BigNumberish> | null): AvailableFundsUpdatedEventFilter;
    AvailableFundsUpdated(amount?: PromiseOrValue<BigNumberish> | null): AvailableFundsUpdatedEventFilter;

    'CheckAccessDisabled()'(): CheckAccessDisabledEventFilter;
    CheckAccessDisabled(): CheckAccessDisabledEventFilter;

    'CheckAccessEnabled()'(): CheckAccessEnabledEventFilter;
    CheckAccessEnabled(): CheckAccessEnabledEventFilter;

    'NewRound(uint256,address,uint256)'(
      roundId?: PromiseOrValue<BigNumberish> | null,
      startedBy?: PromiseOrValue<string> | null,
      startedAt?: null,
    ): NewRoundEventFilter;
    NewRound(
      roundId?: PromiseOrValue<BigNumberish> | null,
      startedBy?: PromiseOrValue<string> | null,
      startedAt?: null,
    ): NewRoundEventFilter;

    'OracleAdminUpdateRequested(address,address,address)'(
      oracle?: PromiseOrValue<string> | null,
      admin?: null,
      newAdmin?: null,
    ): OracleAdminUpdateRequestedEventFilter;
    OracleAdminUpdateRequested(
      oracle?: PromiseOrValue<string> | null,
      admin?: null,
      newAdmin?: null,
    ): OracleAdminUpdateRequestedEventFilter;

    'OracleAdminUpdated(address,address)'(
      oracle?: PromiseOrValue<string> | null,
      newAdmin?: PromiseOrValue<string> | null,
    ): OracleAdminUpdatedEventFilter;
    OracleAdminUpdated(
      oracle?: PromiseOrValue<string> | null,
      newAdmin?: PromiseOrValue<string> | null,
    ): OracleAdminUpdatedEventFilter;

    'OraclePermissionsUpdated(address,bool)'(
      oracle?: PromiseOrValue<string> | null,
      whitelisted?: PromiseOrValue<boolean> | null,
    ): OraclePermissionsUpdatedEventFilter;
    OraclePermissionsUpdated(
      oracle?: PromiseOrValue<string> | null,
      whitelisted?: PromiseOrValue<boolean> | null,
    ): OraclePermissionsUpdatedEventFilter;

    'OwnershipTransferRequested(address,address)'(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
    ): OwnershipTransferRequestedEventFilter;
    OwnershipTransferRequested(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
    ): OwnershipTransferRequestedEventFilter;

    'OwnershipTransferred(address,address)'(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;

    'RemovedAccess(address)'(user?: null): RemovedAccessEventFilter;
    RemovedAccess(user?: null): RemovedAccessEventFilter;

    'RequesterPermissionsSet(address,bool,uint32)'(
      requester?: PromiseOrValue<string> | null,
      authorized?: null,
      delay?: null,
    ): RequesterPermissionsSetEventFilter;
    RequesterPermissionsSet(
      requester?: PromiseOrValue<string> | null,
      authorized?: null,
      delay?: null,
    ): RequesterPermissionsSetEventFilter;

    'RoundDetailsUpdated(uint128,uint32,uint32,uint32,uint32)'(
      paymentAmount?: PromiseOrValue<BigNumberish> | null,
      minSubmissionCount?: PromiseOrValue<BigNumberish> | null,
      maxSubmissionCount?: PromiseOrValue<BigNumberish> | null,
      restartDelay?: null,
      timeout?: null,
    ): RoundDetailsUpdatedEventFilter;
    RoundDetailsUpdated(
      paymentAmount?: PromiseOrValue<BigNumberish> | null,
      minSubmissionCount?: PromiseOrValue<BigNumberish> | null,
      maxSubmissionCount?: PromiseOrValue<BigNumberish> | null,
      restartDelay?: null,
      timeout?: null,
    ): RoundDetailsUpdatedEventFilter;

    'SubmissionReceived(int256,uint32,address)'(
      submission?: PromiseOrValue<BigNumberish> | null,
      round?: PromiseOrValue<BigNumberish> | null,
      oracle?: PromiseOrValue<string> | null,
    ): SubmissionReceivedEventFilter;
    SubmissionReceived(
      submission?: PromiseOrValue<BigNumberish> | null,
      round?: PromiseOrValue<BigNumberish> | null,
      oracle?: PromiseOrValue<string> | null,
    ): SubmissionReceivedEventFilter;

    'ValidatorUpdated(address,address)'(
      previous?: PromiseOrValue<string> | null,
      current?: PromiseOrValue<string> | null,
    ): ValidatorUpdatedEventFilter;
    ValidatorUpdated(
      previous?: PromiseOrValue<string> | null,
      current?: PromiseOrValue<string> | null,
    ): ValidatorUpdatedEventFilter;
  };

  estimateGas: {
    acceptAdmin(
      _oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    acceptOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    addAccess(
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    allocatedFunds(overrides?: CallOverrides): Promise<BigNumber>;

    availableFunds(overrides?: CallOverrides): Promise<BigNumber>;

    changeOracles(
      _removed: PromiseOrValue<string>[],
      _added: PromiseOrValue<string>[],
      _addedAdmins: PromiseOrValue<string>[],
      _minSubmissions: PromiseOrValue<BigNumberish>,
      _maxSubmissions: PromiseOrValue<BigNumberish>,
      _restartDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    checkEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    description(overrides?: CallOverrides): Promise<BigNumber>;

    disableAccessCheck(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    enableAccessCheck(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    getAdmin(_oracle: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getAnswer(_roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getOracles(overrides?: CallOverrides): Promise<BigNumber>;

    getRoundData(_roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getTimestamp(_roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    hasAccess(
      _user: PromiseOrValue<string>,
      _calldata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    latestAnswer(overrides?: CallOverrides): Promise<BigNumber>;

    latestRound(overrides?: CallOverrides): Promise<BigNumber>;

    latestRoundData(overrides?: CallOverrides): Promise<BigNumber>;

    latestTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    linkToken(overrides?: CallOverrides): Promise<BigNumber>;

    maxSubmissionCount(overrides?: CallOverrides): Promise<BigNumber>;

    maxSubmissionValue(overrides?: CallOverrides): Promise<BigNumber>;

    minSubmissionCount(overrides?: CallOverrides): Promise<BigNumber>;

    minSubmissionValue(overrides?: CallOverrides): Promise<BigNumber>;

    onTokenTransfer(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    oracleCount(overrides?: CallOverrides): Promise<BigNumber>;

    oracleRoundState(
      _oracle: PromiseOrValue<string>,
      _queriedRoundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paymentAmount(overrides?: CallOverrides): Promise<BigNumber>;

    removeAccess(
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    requestNewRound(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    restartDelay(overrides?: CallOverrides): Promise<BigNumber>;

    setRequesterPermissions(
      _requester: PromiseOrValue<string>,
      _authorized: PromiseOrValue<boolean>,
      _delay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setValidator(
      _newValidator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    submit(
      _roundId: PromiseOrValue<BigNumberish>,
      _submission: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    timeout(overrides?: CallOverrides): Promise<BigNumber>;

    transferAdmin(
      _oracle: PromiseOrValue<string>,
      _newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    transferOwnership(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateAvailableFunds(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    updateFutureRounds(
      _paymentAmount: PromiseOrValue<BigNumberish>,
      _minSubmissions: PromiseOrValue<BigNumberish>,
      _maxSubmissions: PromiseOrValue<BigNumberish>,
      _restartDelay: PromiseOrValue<BigNumberish>,
      _timeout: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    validator(overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFunds(
      _recipient: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawPayment(
      _oracle: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    withdrawablePayment(_oracle: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptAdmin(
      _oracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    acceptOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    addAccess(
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    allocatedFunds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    availableFunds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeOracles(
      _removed: PromiseOrValue<string>[],
      _added: PromiseOrValue<string>[],
      _addedAdmins: PromiseOrValue<string>[],
      _minSubmissions: PromiseOrValue<BigNumberish>,
      _maxSubmissions: PromiseOrValue<BigNumberish>,
      _restartDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    checkEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    description(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    disableAccessCheck(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    enableAccessCheck(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    getAdmin(_oracle: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAnswer(_roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOracles(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoundData(_roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTimestamp(_roundId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasAccess(
      _user: PromiseOrValue<string>,
      _calldata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    latestAnswer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    latestRound(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    latestRoundData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    latestTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    linkToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxSubmissionCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxSubmissionValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minSubmissionCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minSubmissionValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onTokenTransfer(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    oracleCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oracleRoundState(
      _oracle: PromiseOrValue<string>,
      _queriedRoundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paymentAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeAccess(
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    requestNewRound(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    restartDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setRequesterPermissions(
      _requester: PromiseOrValue<string>,
      _authorized: PromiseOrValue<boolean>,
      _delay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setValidator(
      _newValidator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    submit(
      _roundId: PromiseOrValue<BigNumberish>,
      _submission: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    timeout(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferAdmin(
      _oracle: PromiseOrValue<string>,
      _newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateAvailableFunds(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    updateFutureRounds(
      _paymentAmount: PromiseOrValue<BigNumberish>,
      _minSubmissions: PromiseOrValue<BigNumberish>,
      _maxSubmissions: PromiseOrValue<BigNumberish>,
      _restartDelay: PromiseOrValue<BigNumberish>,
      _timeout: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    validator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawFunds(
      _recipient: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawPayment(
      _oracle: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    withdrawablePayment(_oracle: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
